version: '3.8'

services:
  # PostgreSQL с вашим дампом
  postgres:
    image: postgres:17-alpine
    container_name: mlcinema_postgres
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    ports:
      - "5433:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./db/mlcinema_dump.sql:/docker-entrypoint-initdb.d/dump.sql:ro
    networks:
      - mlcinema_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Python ML Service
  ml_service:
    build:
      context: ./ml_service
      dockerfile: Dockerfile
    container_name: mlcinema_ml
    ports:
      - "5000:5000"
    environment:
      - FLASK_ENV=production
      - GO_SERVER_URL=http://go_server:8000
    volumes:
      - ml_data:/app/data
      - ml_models:/app/model
    networks:
      - mlcinema_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Go Server
  go_server:
    build:
      context: .                    # Контекст - весь проект
      dockerfile: go_server/Dockerfile
    container_name: mlcinema_go
    ports:
      - "8000:8000"
    environment:
      - DB_HOST=${DB_HOST}
      - DB_PORT=${DB_PORT}
      - DB_USER=${DB_USER}
      - DB_PASSWORD=${DB_PASSWORD}
      - DB_NAME=${DB_NAME}
      - ML_SERVICE_URL=${ML_SERVICE_URL}
    depends_on:
      postgres:
        condition: service_healthy
      ml_service:
        condition: service_healthy
    networks:
      - mlcinema_network

volumes:
  postgres_data:
  ml_data:
  ml_models:

networks:
  mlcinema_network:
    driver: bridge